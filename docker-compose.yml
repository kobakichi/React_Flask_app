# docker composerのバージョンの指定
version: "3.9"

# 起動するサービスコンテナを記述
services:
  # nodeコンテナを起動
  node:
    # ./frontにあるdockerfileからimageを作成する。
    build: ./front
    # 作成するdockerコンテナの名前
    container_name: node
    # docker内と共有するフォルダの指定
    volumes:
      - ./front/React:/front
      # - ./front/scripts:/front
    # docker内に入った時の初期パスの指定
    working_dir: /front
    # コンテナにバインドするポートの指定（左:自分のPCポート、右:dookerコンテナのポート）
    ports:
      - 3000:3000
    # コンテナが勝手に終了しないための設定
    tty: true
    # 標準入出力とエラー出力をコンテナに結びつける設定
    stdin_open: true
    # ホットリロードを行う設定
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      # - front_network
      my_network:
        ipv4_address: 192.168.10.31

  # flaskのコンテナを起動する。
  flask:
    container_name: flask
    # ./backendにあるdockerfileを使ってimageを作成する。
    build: ./backend
    # 自分のPCの5001番ポートをdockerの5000番ポートへバインドする。
    ports:
      - "5001:5000"
    # ./backend/appディレクトリをdockerの/usr/src/appへ繋ぐ
    volumes:
      - ./backend/app:/usr/src/app
    # working_dir: /usr/src/scripts
    command: flask run --host=0.0.0.0
    networks:
      # - backend_network
      my_network:
        ipv4_address: 192.168.10.45
    environment:
      TZ: "Asia/Tokyo"

  web:
    container_name: NginX
    # build:
    #   context: .
    #   dockerfile: ./web/Dockerfile-NginX
    image: nginx:latest
    # command: nginx -g "daemon off;"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - ./front/React/build:/usr/share/nginx/html
      - ./log/1.log:/var/log/nginx/host.access.log
      # - ./web/conf/default.conf:/etc/nginx/conf.d/default.conf
      # - ../ssl/certs/:/etc/pki/tls/certs/
      # - ../ssl/private/:/etc/pki/tls/private/
      # - gunicorn_socket:/tmp/gunicorn_socket/gunicorn_flask.sock
    # links:
    #   - flask
    # restart: always
    networks:
      my_network:
        ipv4_address: 192.168.10.22

networks:
  my_network:
    driver: bridge
    ipam:
      driver: default
      config:
        # ipaddressの範囲を決める。
        - subnet: 192.168.10.0/24
  # backend_network:
  #   name: backend_network
  #   driver: bridge
  # front_network:
  #   name: front_network
  #   driver: bridge

volumes:
  log:
  # gunicorn_socket:
